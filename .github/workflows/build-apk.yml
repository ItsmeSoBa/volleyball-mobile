name: Build APK (Volleyball pygame)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    # Make SDK/NDK paths explicit and nuke runner's conflicting NDK env
    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROIDSDK:       ${{ github.workspace }}/android-sdk
      ANDROID_HOME:     ${{ github.workspace }}/android-sdk
      ANDROID_SDK_HOME: ${{ github.workspace }}/android-sdk
      ANDROIDNDK:       ${{ github.workspace }}/android-sdk/ndk/25.2.9519653
      ANDROID_NDK:      ""
      ANDROID_NDK_HOME: ""
      ANDROID_NDK_ROOT: ""

    steps:
      - uses: actions/checkout@v4

      - name: Host Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Java 17 (sdkmanager/Gradle)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Optional but helpful: cache SDK and buildozer workdir across runs
      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: android-sdk
          key: android-sdk-a33-bt3302-ndk25b

      - name: Cache Buildozer workdir
        uses: actions/cache@v4
        with:
          path: |
            ~/.buildozer
            .buildozer
          key: buildozer-cache-v1

      - name: Ensure project files exist (placeholders if missing)
        run: |
          set -eux
          ls -la
          if [ ! -f main.py ]; then
            cat > main.py <<'PY'
import sys, pygame; print("Placeholder main.py – add your game code here."); sys.exit(0)
PY
          fi
          if [ ! -f icon.png ]; then
            base64 -d > icon.png <<'B64'
iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAklEQVR4AewaftIAAABcSURBVO3B
QREAAAgDINc/9E0sJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAeBkNAQABnCNsvQAAAABJRU5ErkJggg==
B64
          fi

      - name: Normalize buildozer.spec (dedupe keys, enforce safe values)
        run: |
          python - <<'PY'
import configparser, os, io
p='buildozer.spec'
cp=configparser.ConfigParser()
cp.optionxform=str
with open(p, 'r', encoding='utf-8') as f:
    cp.read_file(f)
# Ensure sections exist
for s in ('app','buildozer'):
    if s not in cp: cp[s]={}
A=cp['app']
# Enforce single, safe values (prevents duplicate-option errors)
A['source.dir']='.'; A['source.include_exts']='py,png'
A['icon.filename']='icon.png'
A['p4a.bootstrap']='sdl2'
A['android.api']='33'; A['android.minapi']='21'
A['android.ndk']='25b'; A['android.archs']='arm64-v8a'
A['android.build_tools_version']='33.0.2'
A['android.accept_sdk_license']='True'
A['android.sdk_path']='./android-sdk'
A['android.ndk_path']='./android-sdk/ndk/25.2.9519653'
# Keep existing requirements if present, else set primary line
if 'requirements' not in A or not A['requirements'].strip():
    A['requirements']='python3, pygame==2.6.1'
with open(p,'w',encoding='utf-8') as f:
    cp.write(f)
print("Normalized", p)
PY

      - name: System deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential git zip unzip \
            libffi-dev libssl-dev zlib1g-dev liblzma-dev \
            libncurses6 libncurses-dev pkg-config wget curl

      - name: Install Android SDK + NDK (with old-path shims)
        run: |
          set -eux
          SDK="$ANDROID_SDK_ROOT"
          mkdir -p "$SDK/cmdline-tools"
          if [ ! -d "$SDK/cmdline-tools/latest" ]; then
            cd "$SDK/cmdline-tools"
            curl -L -o tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
            unzip -q tools.zip
            rm -f tools.zip
            mv cmdline-tools latest
          fi

          # Use sdkmanager (Java 17 already configured)
          export PATH="$SDK/cmdline-tools/latest/bin:$PATH"
          sdkmanager --version

          # Robust installs (retry for flaky networks)
          for i in 1 2 3; do
            yes | sdkmanager --sdk_root="$SDK" \
              "platform-tools" "platforms;android-33" "build-tools;33.0.2" \
              "ndk;25.2.9519653" "cmdline-tools;latest" && break || sleep 5
          done
          yes | sdkmanager --sdk_root="$SDK" --licenses || true

          # Old Buildozer checks $SDK/tools/bin; provide wrappers
          mkdir -p "$SDK/tools/bin"
          echo '#!/usr/bin/env bash
          exec "$(dirname "$0")/../../cmdline-tools/latest/bin/sdkmanager" "$@"' > "$SDK/tools/bin/sdkmanager"
          chmod +x "$SDK/tools/bin/sdkmanager"
          echo '#!/usr/bin/env bash
          exec "$(dirname "$0")/../../cmdline-tools/latest/bin/avdmanager" "$@"' > "$SDK/tools/bin/avdmanager"
          chmod +x "$SDK/tools/bin/avdmanager"

          # Put tools on PATH for later steps
          {
            echo "$SDK/cmdline-tools/latest/bin"
            echo "$SDK/platform-tools"
            echo "$SDK/build-tools/33.0.2"
            echo "$SDK/tools/bin"
          } >> $GITHUB_PATH

      - name: Verify tools
        run: |
          which sdkmanager || true
          which aidl || true
          java -version
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          echo "ANDROIDNDK=$ANDROIDNDK"

      - name: Install Buildozer (stable)
        run: |
          python -m pip install --upgrade pip
          pip install "cython<3.0" buildozer==1.5.0
          buildozer --version

      - name: Build with smart fallbacks (full logs)
        run: |
          set -euxo pipefail
          export JAVA_HOME="$(dirname "$(dirname "$(readlink -f "$(which javac)")")")"
          export PATH="$JAVA_HOME/bin:$PATH"
          java -version; javac -version

          edit_req () {
            python - "$1" <<'PY'
import sys,re
p='buildozer.spec'
t=open(p,encoding='utf-8').read()
t=re.sub(r'(?im)^(\\s*requirements\\s*=).+$', r'\\1 '+sys.argv[1], t)
open(p,'w',encoding='utf-8').write(t)
print("requirements ->", sys.argv[1])
PY
          }
          try_build () {
            local label="$1"
            echo "::group::Build attempt: $label"
            ( buildozer android debug --verbose 2>&1 | tee "buildozer_${label}.log" )
            local code=${PIPESTATUS[0]}
            echo "::endgroup::"
            return $code
          }

          # Attempt A: Python 3.11 + pygame 2.6.1
          edit_req "python3, pygame==2.6.1"
          if try_build "py311_pygame261"; then
            echo "OK: primary toolchain"; exit 0
          fi

          # Detect known header/ABI errors (e.g., longintrepr.h on old pygame)
          if grep -i -E 'longintrepr\\.h|undefined reference|fatal error' buildozer_py311_pygame261.log >/dev/null 2>&1; then
            echo "Known compile error detected — switching toolchain."
          fi

          # Attempt B: Python 3.10 + pygame 2.5.2 (compat)
          edit_req "python3==3.10.12, pygame==2.5.2"
          if try_build "py310_pygame252"; then
            echo "OK: fallback toolchain"; exit 0
          fi

          echo "Both attempts failed. Tail of logs follows:"
          tail -n 300 buildozer_py311_pygame261.log || true
          tail -n 300 buildozer_py310_pygame252.log || true
          exit 1

      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: volleyball-apk
          path: bin/*.apk

      - name: Upload logs & workdir (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-and-workdir
          path: |
            buildozer_*.log
            buildozer.spec
            .buildozer/**
          if-no-files-found: warn
