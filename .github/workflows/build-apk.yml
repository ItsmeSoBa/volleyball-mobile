name: Build APK (Volleyball pygame)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'  # host Python (p4a builds its own)

      # Force Java 17 for sdkmanager/Gradle
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Ensure repo has the expected files; add tiny placeholders if missing
      - name: Ensure project files exist
        run: |
          set -eux
          ls -la
          # Minimal main.py placeholder if absent (so build never dies early)
          if [ ! -f main.py ]; then
            cat > main.py <<'PY'
import sys
print("Placeholder main.py (no game found).")
PY
          fi
          # Minimal icon placeholder if absent
          if [ ! -f icon.png ]; then
            base64 -d > icon.png <<'B64'
iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAklEQVR4AewaftIAAABcSURBVO3B
QREAAAgDINc/9E0sJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAeBkNAQABnCNsvQAAAABJRU5ErkJggg==
B64
          fi
          # If buildozer.spec missing, write a sane default
          if [ ! -f buildozer.spec ]; then
            cat > buildozer.spec <<'SPEC'
[app]
title = Volleyball
package.name = volleyball
package.domain = org.yourname
version = 0.27
source.dir = .
source.include_exts = py,png
icon.filename = icon.png
requirements = python3, pygame==2.6.1
orientation = landscape
fullscreen = 1
p4a.bootstrap = sdl2
android.api = 33
android.minapi = 21
android.ndk = 25b
android.archs = arm64-v8a
android.build_tools_version = 33.0.2
android.accept_sdk_license = True
android.sdk_path = ./android-sdk
android.ndk_path = ./android-sdk/ndk/25.2.9519653
android.permissions = INTERNET
[buildozer]
log_level = 2
warn_on_root = 0
SPEC
          fi

      - name: System deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential git zip unzip \
            libffi-dev libssl-dev zlib1g-dev liblzma-dev \
            libncurses6 libncurses-dev pkg-config wget curl

      - name: Install Android SDK + NDK (with old-path shims)
        run: |
          set -eux
          SDK="$GITHUB_WORKSPACE/android-sdk"
          mkdir -p "$SDK/cmdline-tools"
          cd "$SDK/cmdline-tools"
          curl -L -o tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q tools.zip
          rm -f tools.zip
          mv cmdline-tools latest

          export PATH="$SDK/cmdline-tools/latest/bin:$PATH"
          sdkmanager --version

          # Robust installs (retry a few times in case of flaky network)
          for i in 1 2 3; do
            yes | sdkmanager --sdk_root="$SDK" \
              "platform-tools" "platforms;android-33" "build-tools;33.0.2" \
              "ndk;25.2.9519653" "cmdline-tools;latest" && break || sleep 5
          done
          yes | sdkmanager --sdk_root="$SDK" --licenses || true

          # Old Buildozer/p4a expect $SDK/tools/bin; provide wrappers
          mkdir -p "$SDK/tools/bin"
          cat > "$SDK/tools/bin/sdkmanager" <<'EOF'
          #!/usr/bin/env bash
          exec "$(dirname "$0")/../../cmdline-tools/latest/bin/sdkmanager" "$@"
          EOF
          chmod +x "$SDK/tools/bin/sdkmanager"
          cat > "$SDK/tools/bin/avdmanager" <<'EOF'
          #!/usr/bin/env bash
          exec "$(dirname "$0")/../../cmdline-tools/latest/bin/avdmanager" "$@"
          EOF
          chmod +x "$SDK/tools/bin/avdmanager"

          # Persist env
          {
            echo "ANDROID_SDK_ROOT=$SDK"
            echo "ANDROIDSDK=$SDK"
            echo "ANDROID_HOME=$SDK"
            echo "ANDROID_SDK_HOME=$SDK"
            echo "ANDROIDNDK=$SDK/ndk/25.2.9519653"
          } >> $GITHUB_ENV

          {
            echo "$SDK/cmdline-tools/latest/bin"
            echo "$SDK/platform-tools"
            echo "$SDK/build-tools/33.0.2"
            echo "$SDK/tools/bin"
          } >> $GITHUB_PATH

      - name: Install Buildozer (pin stable)
        run: |
          python -m pip install --upgrade pip
          pip install "cython<3.0" buildozer==1.5.0
          buildozer --version

      - name: Build APK with smart fallbacks (logs captured)
        run: |
          set -euxo pipefail

          export JAVA_HOME="$(dirname "$(dirname "$(readlink -f "$(which javac)")")")"
          export PATH="$JAVA_HOME/bin:$PATH"
          java -version
          javac -version

          echo "=== Using ANDROIDSDK=$ANDROIDSDK ==="
          echo "=== Using ANDROIDNDK=$ANDROIDNDK ==="

          edit_req() {
            local REQ="$1"
            echo ">> Setting requirements to: $REQ"
            python - "$REQ" <<'PY'
import sys, re, io
p='buildozer.spec'
txt=open(p,encoding='utf-8').read()
new=re.sub(r'(?mi)^(\s*requirements\s*=\s*).*$',
           r'\1'+sys.argv[1], txt)
open(p,'w',encoding='utf-8').write(new)
print("requirements now set.")
PY
          }

          try_build() {
            local LABEL="$1"
            echo "::group::Build attempt: $LABEL"
            ( buildozer android debug --verbose 2>&1 | tee buildozer_${LABEL}.log )
            local code=${PIPESTATUS[0]}
            echo "::endgroup::"
            return $code
          }

          # --- Attempt A: Python 3.11 + pygame 2.6.1 (fast path)
          edit_req "python3, pygame==2.6.1"
          if try_build "py311_pygame261"; then
            echo "Primary build succeeded."
          else
            echo "Primary build failed — checking for known issues…"
            # If 'longintrepr.h' or similar Python 3.11 header issues, fall back to Py3.10 + pygame 2.5.2
            if grep -i -E 'longintrepr\.h|undefined reference|fatal error' buildozer_py311_pygame261.log >/dev/null 2>&1; then
              echo "Header/link errors detected — trying fallback toolchain."
            fi

            # --- Attempt B: Python 3.10 + pygame 2.5.2 (compat path)
            edit_req "python3==3.10.12, pygame==2.5.2"
            if try_build "py310_pygame252"; then
              echo "Fallback build succeeded."
            else
              echo "Both attempts failed; surfacing log tails for diagnosis."
              tail -n 400 buildozer_py311_pygame261.log || true
              tail -n 400 buildozer_py310_pygame252.log || true
              exit 1
            fi
          fi

      - name: Upload APK artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: volleyball-apk
          path: bin/*.apk

      - name: Upload logs & .buildozer (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-and-workdir
          path: |
            buildozer_*.log
            buildozer.spec
            .buildozer/**
          if-no-files-found: warn
